var Base64 = {
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    encode: function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
                    this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
    },


    decode: function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = Base64._utf8_decode(output);

        return output;

    },
    _utf8_encode: function (string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    },
    _utf8_decode: function (utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while (i < utftext.length) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }
};
function RemoveTagScriptAndEncode(text) {
    var reg_script = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
    while (reg_script.test(text)) {
        text = text.replace(reg_script, "");
    }
    return Base64.encode(text);
}

var commentIsLoading = false;
var comment = {
    page: 1,
    init: function () {
        var me = this;
        
        if ($('#listComment ul').children().length == 0) {
            $('#divStreamPaging').remove();
        }
        $('#btnViewMoreComment').on('click', function () {
            if (commentIsLoading) {
                return;
            }
            var pageNext = $('#hidPage').val();
            if (pageNext == undefined) return;
            commentIsLoading = true;
            $.ajax({
                url: "/Handler/GetListComment.ashx",
                data: {
                    page: $('#hidPage').val(),
                    n: $('#hidObjId').val()
                },
                type: "GET",
                success: function (response) {
                    if (response && response != '') {
                        $('#listComment ul').append(response);
                        me.iframeHeight();
                        eventBind();
                        commentIsLoading = false;
                        $('#hidPage').val(parseInt($('#hidPage').val()) + 1);
                    } else {
                        $('#divStreamPaging').remove();
                    }
                }
            });
        });

        me.iframeHeight();
        eventBind();
    },
    iframeHeight: function () {
        var me = this;
        var h = $(document).height();
        console.log(h);
        me.postHeight(h);
        if ($('#hidHeight').val() > 0) {
            $('#listComment ul').slimscroll({
                height: $('#hidHeight').val() - $('#sendbl').height() - 70
            });
            me.postHeight($('#hidHeight').val());
        }
    },
    resetForm: function () {
        $('#txtName, #txtEmail, #txtComment').val('');
    },
    send: function () {
        var me = this;
        var txt = document.getElementById('txtName');
        if (txt.value == '' || txt.value == 'Họ và tên') {
            alert("Bạn chưa nhập họ tên!");
            txt.focus();
            return false;
        }

        txt = document.getElementById('txtEmail');
        if (txt.value == '' || txt.value == 'Email') {
            alert("Bạn chưa nhập email!");
            txt.focus();
            return false;

        }
        if (!checkMail(txt.value)) {
            alert("Bạn nhập email không đúng định dạng!");
            txt.focus();
            return false;
        }


        txt = document.getElementById('txtComment');
        if (txt.value == '' || txt.value == 'Ý kiến của bạn là...') {
            alert("Bạn chưa nhập nội dung!");
            txt.focus();
            return false;
        }
        $.ajax({
            url: "/Handler/SendInfo.ashx",
            data: {
                objId: RemoveTagScriptAndEncode($('#hidObjId').val()),
                name: RemoveTagScriptAndEncode($('#txtName').val()),
                email: RemoveTagScriptAndEncode($('#txtEmail').val()),
                content: RemoveTagScriptAndEncode($('#txtComment').val())
            },
            xhrFields: { withCredentials: true },
            type: "POST",
            success: function (response) {
                if (response && response == '1') {
                    alert('Bạn đã bình luận thành công. Báo Tin Tức xin cảm ơn bạn và đang chờ duyệt.');
                    me.resetForm();
                }
                else if(response == '2')
                {
                    alert('Bạn đợi 3 phút nữa để bình luận tiếp nhé.');
                    me.resetForm();
                }
                else if (response == '0') {
                    alert('Bạn gửi bình luận không thành công.');
                    me.resetForm();
                }
            }
        });
    },
    postHeight: function (height) {
         parent.postMessage(height, '*');
    }
};

function checkMail(email) {
    return /^([a-zA-Z0-9_.-])+@([a-zA-Z0-9_.-])+\.([a-zA-Z])+([a-zA-Z])+/.test(email);

}
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function eventBind() {
    $('.comment_list li[event-binded=0]').each(function () {
        var color;
        var userName = $(this).find('.fullname').text();
        var exist = $('.comment_list li[event-binded=1] .avatar[rel="' + userName + '"]');
        if (exist && exist.length > 0) {
            console.log(exist);
            color = exist.css('background-color');
        } else {
            var r = getRandomInt(0, 150);
            var g = getRandomInt(0, 150);
            var b = getRandomInt(0, 150);
            color = "rgb(" + r + "," + g + "," + b + ")";
        }
        $(this).find('.firtname').css('background-color', color);
        $(this).attr('event-binded', 1);
    });
}

function InputBlur(text, elmt) {
    if ($(elmt).val() == '') {
        $(elmt).val(text);
    }
}
function reloadCaptcha(ele) {
    $(ele).attr('src', $(ele).attr('src') + '?' + Math.random());
}